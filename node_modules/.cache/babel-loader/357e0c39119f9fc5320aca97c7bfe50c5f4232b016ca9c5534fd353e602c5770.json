{"ast":null,"code":"var _jsxFileName = \"/home/coder/react-validation-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [inputValue, setInputValue] = useState('');\n  const [error, setError] = useState('');\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n  const validateInput = () => {\n    const numbers = inputValue.split(',');\n\n    // Check if all comma-separated values are 11 digits\n    for (let number of numbers) {\n      number = number.trim();\n      if (number.length !== 11 || isNaN(number)) {\n        setError(`Invalid entry: \"${number}\". Each number must be 11 digits long.`);\n        return;\n      }\n    }\n\n    // Clear error if all are valid\n    setError('');\n\n    // You can call your backend or Selenium logic here with valid numbers\n    console.log(\"Valid numbers: \", numbers);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Enter Comma-Separated 11-Digit Numbers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: inputValue,\n      onChange: handleInputChange,\n      placeholder: \"Enter numbers (comma separated)\",\n      style: {\n        width: '300px',\n        padding: '5px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: validateInput,\n      style: {\n        marginLeft: '10px'\n      },\n      children: \"Validate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"zaKr1kAUte0cucpv5wORb2yk01w=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","inputValue","setInputValue","error","setError","handleInputChange","e","target","value","validateInput","numbers","split","number","trim","length","isNaN","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","style","width","padding","onClick","marginLeft","color","_c","$RefreshReg$"],"sources":["/home/coder/react-validation-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\n\nfunction App() {\n  const [inputValue, setInputValue] = useState('');\n  const [error, setError] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const validateInput = () => {\n    const numbers = inputValue.split(',');\n    \n    // Check if all comma-separated values are 11 digits\n    for (let number of numbers) {\n      number = number.trim();\n      if (number.length !== 11 || isNaN(number)) {\n        setError(`Invalid entry: \"${number}\". Each number must be 11 digits long.`);\n        return;\n      }\n    }\n    \n    // Clear error if all are valid\n    setError('');\n    \n    // You can call your backend or Selenium logic here with valid numbers\n    console.log(\"Valid numbers: \", numbers);\n  };\n\n  return (\n    <div className=\"App\">\n      <h2>Enter Comma-Separated 11-Digit Numbers</h2>\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={handleInputChange}\n        placeholder=\"Enter numbers (comma separated)\"\n        style={{ width: '300px', padding: '5px' }}\n      />\n      <button onClick={validateInput} style={{ marginLeft: '10px' }}>\n        Validate\n      </button>\n      {error && <p style={{ color: 'red' }}>{error}</p>}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMS,iBAAiB,GAAIC,CAAC,IAAK;IAC/BJ,aAAa,CAACI,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC/B,CAAC;EAED,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAC1B,MAAMC,OAAO,GAAGT,UAAU,CAACU,KAAK,CAAC,GAAG,CAAC;;IAErC;IACA,KAAK,IAAIC,MAAM,IAAIF,OAAO,EAAE;MAC1BE,MAAM,GAAGA,MAAM,CAACC,IAAI,CAAC,CAAC;MACtB,IAAID,MAAM,CAACE,MAAM,KAAK,EAAE,IAAIC,KAAK,CAACH,MAAM,CAAC,EAAE;QACzCR,QAAQ,CAAC,mBAAmBQ,MAAM,wCAAwC,CAAC;QAC3E;MACF;IACF;;IAEA;IACAR,QAAQ,CAAC,EAAE,CAAC;;IAEZ;IACAY,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEP,OAAO,CAAC;EACzC,CAAC;EAED,oBACEZ,OAAA;IAAKoB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBrB,OAAA;MAAAqB,QAAA,EAAI;IAAsC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC/CzB,OAAA;MACE0B,IAAI,EAAC,MAAM;MACXhB,KAAK,EAAEP,UAAW;MAClBwB,QAAQ,EAAEpB,iBAAkB;MAC5BqB,WAAW,EAAC,iCAAiC;MAC7CC,KAAK,EAAE;QAAEC,KAAK,EAAE,OAAO;QAAEC,OAAO,EAAE;MAAM;IAAE;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C,CAAC,eACFzB,OAAA;MAAQgC,OAAO,EAAErB,aAAc;MAACkB,KAAK,EAAE;QAAEI,UAAU,EAAE;MAAO,CAAE;MAAAZ,QAAA,EAAC;IAE/D;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EACRpB,KAAK,iBAAIL,OAAA;MAAG6B,KAAK,EAAE;QAAEK,KAAK,EAAE;MAAM,CAAE;MAAAb,QAAA,EAAEhB;IAAK;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9C,CAAC;AAEV;AAACvB,EAAA,CA3CQD,GAAG;AAAAkC,EAAA,GAAHlC,GAAG;AA6CZ,eAAeA,GAAG;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}